// LOGO
.logo {
  height: 3.25rem;
  margin-left: 2rem;
}


// SEARCH BOX
.search {
  flex: 0 0 40%;
  display: flex;
  justify-content: center;
  align-items: center;

  &__input {
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: .7rem 2rem;
    border-radius: 100px;
    width: 90%;
    transition: all .2s;
    margin-right: -3.5rem;

    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    &::-webkit-input-placeholder {
      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  &__btn {
    border: none;
    background-color: transparent;

    &:focus {
      outline: none;
    }

    &:active {
      transform: translateY(2px);
    }
  }

  &__icon {
    width: 2rem;
    height: 2rem;
    // change svg color with fill
    fill: var(--color-grey-dark-3);
  }

}


// USER NAV
.user-nav {
  display: flex;
  align-items: center;

  // in the parent el (.header) we specified align-items:center. However, for this item we don't want it to be in center,
  // so we overwrite it for this item
  align-self: stretch;

  & > * {
    padding: 0 2rem;
    cursor: pointer;
    height: 100%;
    display: flex;
    align-items: center;

    &:hover {
      background-color: VAR(--color-grey-light-2);
    }
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;
    fill: var(--color-grey-dark-2);
  }

  &__notification {
    font-size: .8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%;
    background-color: var(--color-primary);
    color: #fff;
    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    // flexbos does not only work for centering children el, it can be used to center txt!
    // instead of text-align and line-height, use flexbox
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &__user-photo {
    height: 3.75rem;
    border-radius: 50%;
    margin-right: 1rem;
  }

}


// SIDE NAVIGATION
.side-nav {
  font-size: 1.4rem;
  margin-top: 3.5rem;
  list-style: none;


  &__item {
    position: relative;

    &:not(:last-child) {
      margin-bottom: .5rem;
    }

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      width: 3px;
      background-color: var(--color-primary);

      // different animations for different properties
      transition: transform .2s, 
                  width .4s cubic-bezier(1, 0, 0, 1) .2s,
                  background-color .1s;

      // scale makes el scale in all directions; scaleY makes it scale only vertically
      // by default scale starts in the center, as thats where transform-origin is set
      // e.g.:
      // transform-origin: bottom; // center is default; top, bottom, etc.
      transform: scaleY(0);
    }

  }

  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1);
    width: 100%;
  }

  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  &__link:link,
  &__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block;
    padding: 1.5rem 3rem;
    display: flex;
    align-items: center;

    // ::before animation is below the link now
    position: relative; // z-inex only work if position is specified!
    z-index: 2;
  }

  &__icon {
    width: 1.75rem;
    height: 1.75rem;
    margin-right: 2rem;

    // currentColor is color of current or parent el (not only available in fill)
    // if the link would change color when hovered, that color would automatically be appied here; without using
    // currentColor, we would have to specify it here as well for color change to happen
    fill: currentColor;
  }

}


// LEGAL TXT
.legal {
  font-size: 1.2rem;
  text-align: center;
  padding: 2.5rem;
  color: var(--color-grey-dark-3);
}


// GALLERY
.gallery {
  display: flex;

  &__photo {
    width: 100%;
    display: block; // setting <img> as block or inline-block removes the white space below img
  }

}


// OVERVIEW
.overview {
  display: flex;
  align-items: center;
  border-bottom: var(--line);

  &__heading {
    font-size: 2.25rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;
  }

  &__stars {
    // using margin-right:auto inside flexbox makes the margin as large as possible
    margin-right: auto;
    display: flex;
    align-items: center;
  }

  &__icon-star,
  &__icon-location {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }

  &__icon-location {
    margin-right: .5rem;
  }

  &__location {
    font-size: 1.2rem;
    display: flex;
    align-items: center;
  }

  &__rating {
    background-color: var(--color-primary);
    margin-left: 3rem;
    color: #fff;
    align-self: stretch;
    padding: 0 2.25rem;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;
    margin-bottom: -3px;
  }

  &__rating-count {
    font-size: .8rem;
    text-transform: uppercase;
  }

}



// BUTTON INLINE
.btn-inline {
  border: none;
  color: var(--color-primary);
  padding-bottom: 2px;
  display: inline-block;
  background-color: transparent;
  cursor: pointer;
  transform: all .2s;

  // border now has same color as text; when we add hover effect, changing the color will automatically change
  // color of border
  border-bottom: 1.5px solid currentColor;
  
  // like this btn is more reusable, it will inherit the font-size of el in which it is used
  font-size: inherit;

  &:hover {
    color: var(--color-grey-dark-1);

    span {
      margin-left: 8px;
    }
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }

  & span {
    margin-left: 3px;
    transition: margin-left .2s;
  }
}

@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none;
  }
  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, .25);
  }
  100% {
    transform: scale(1);
    box-shadow: none;
  }
}


// PARAGRAPH
// last-child applies to all children of the el, last-of-type applies only to specific type of children
.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}


// LIST
.list {
  margin: 3rem 0;
  list-style: none;
  padding: 3rem;
  border-top: var(--line);
  border-bottom: var(--line);
  display: flex;
  flex-wrap: wrap;

  &__item {
    // for items in flexbox, it's better to use flex, than the width property
    flex: 0 0 50%;
    margin-bottom: .7rem;
    
    // adding svg like this to a list__item is a better and cleaner practice, opposed to placing another el in html
    // it comes with one problem: it's more difficult to change the svg color
    &::before {
      content: "";
      display: inline-block;
      height: 1rem;
      width: 1rem;
      margin-right: .7rem;

      /* for older browsers
      background-image: url("../img/chevron-thin-right.svg");
      background-size: cover;
      */

      // for new browsers
      // defines the area where we can look through the el, and see what's behind it
      // similar to clipping
      background-color: var(--color-primary);
      -webkit-mask-image: url("../img/chevron-thin-right.svg");
      -webkit-mask-size: cover;
      mask-image: url("../img/chevron-thin-right.svg");
      mask-size: cover;
    }
  }
}


// RECOMMEND
.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);
  display: flex;
  justify-content: space-between;
  align-items: center;

  &__count {
    
  }

  &__friends {

  }

  &__photo {
    height: 4rem;
    width: 4rem;
    border-radius: 50%;

    // every img has a border. This shrinks the img. We can eather add 3px to img height and width, or
    // change the border-box, so that border is not calculated into width and height
    border: 3px solid #fff;
    box-sizing: content-box;

    &:not(:last-child) {
      margin-right: -1.5rem;
    }
  }
}


// REVIEWS
.review {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;
  position: relative;
  overflow: hidden;

  &__text {
    margin-bottom: 2rem;

    // z-index only works if you set the position
    z-index: 2;
    position: relative;
  }

  &__user {
    display: flex;
    align-items: center;
  }

  &__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1.5rem;
  }

  &__user-box {
    margin-right: auto;
  }

  &__user-name {
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: .4rem;
  }

  &__user-date {
    font-size: 1rem;
    color: var(--color-grey-dark-3);
  }

  &__rating {
    color: var(--color-primary);
    font-size: 2.2rem;
    font-weight: 300;
  }

  &::before {
    content: "\201C"; // content is HTML entity
    position: absolute;
    top: -2.5rem;
    left: -1rem;
    line-height: 1;
    font-size: 20rem;
    color: var(--color-grey-light-2);
    font-family: sans-serif;
    z-index: 1;
  }

}